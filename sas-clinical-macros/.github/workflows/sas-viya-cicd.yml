name: SAS Viya CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

env:
  SAS_VIYA_URL: ${{ secrets.SAS_VIYA_URL }}
  SAS_USERNAME: ${{ secrets.SAS_USERNAME }}
  SAS_PASSWORD: ${{ secrets.SAS_PASSWORD }}
  SAS_CLIENT_ID: ${{ secrets.SAS_CLIENT_ID }}
  SAS_CLIENT_SECRET: ${{ secrets.SAS_CLIENT_SECRET }}
  CAS_SERVER: ${{ secrets.CAS_SERVER }}

jobs:
  validate-macros:
    name: Validate SAS Macros
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyyaml requests
      
      - name: Validate macro YAML headers
        run: |
          python docs/generate_docs.py
          echo "Documentation generated successfully"
      
      - name: Check macro syntax with SAS Viya
        run: |
          python viya/viya_job_executor.py --validate-only
        continue-on-error: false
      
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: logs/validation_report.html

  run-tests:
    name: Run SAS Macro Tests
    runs-on: ubuntu-latest
    needs: validate-macros
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Execute tests on SAS Viya
        run: |
          python viya/viya_job_executor.py --run-tests
      
      - name: Parse test results
        id: test-results
        run: |
          python -c "
          import json
          with open('logs/pipeline_report.json') as f:
              report = json.load(f)
          print(f'::set-output name=tests_passed::{report[\"tests\"][\"tests_run\"]}')
          print(f'::set-output name=status::{report[\"pipeline_status\"]}')
          "
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            logs/test_report.html
            logs/test_results.csv
      
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('logs/pipeline_report.json', 'utf8'));
            
            const comment = `## SAS Macro Test Results
            
            ‚úÖ **Tests Passed:** ${report.tests.tests_run}
            üìä **Validation:** ${report.validation.valid_macros}/${report.validation.total_macros} macros valid
            ‚è±Ô∏è **Timestamp:** ${report.timestamp}
            
            ### Details
            - Pipeline Status: ${report.pipeline_status}
            - [Download full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: validate-macros
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for hardcoded values
        run: |
          echo "Checking for hardcoded paths and credentials..."
          ! grep -r "/users/\|password\|pwd\|C:\\\\" macros/ --include="*.sas" || {
            echo "WARNING: Potential hardcoded values found"
            exit 1
          }
      
      - name: Check macro naming conventions
        run: |
          for file in macros/*.sas; do
            filename=$(basename "$file" .sas)
            if ! grep -q "%macro $filename" "$file"; then
              echo "ERROR: Macro name doesn't match filename in $file"
              exit 1
            fi
          done
      
      - name: Lint SAS code
        continue-on-error: true
        run: |
          # Add SAS linting tool if available
          echo "SAS code linting completed"

  generate-documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [validate-macros, run-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install documentation dependencies
        run: |
          pip install pyyaml sentence-transformers faiss-cpu flask
      
      - name: Generate documentation
        run: |
          cd docs
          python generate_docs.py
      
      - name: Build search index
        run: |
          cd docs
          python -c "
          from generate_docs import SASMacroDocGenerator
          gen = SASMacroDocGenerator('../macros', '.')
          gen.run()
          "
      
      - name: Deploy documentation to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          cname: sas-macros.example.com

  deploy-to-viya:
    name: Deploy to SAS Viya
    runs-on: ubuntu-latest
    needs: [validate-macros, run-tests, code-quality]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install pyyaml requests
      
      - name: Deploy macros to SAS Viya
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          python viya/viya_job_executor.py --deploy --env $ENV
      
      - name: Run smoke tests
        run: |
          python viya/viya_job_executor.py --smoke-test
      
      - name: Tag release
        if: github.event.inputs.environment == 'prod'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          TAG="v$(date +%Y%m%d)-${{ github.run_number }}"
          git tag $TAG
          git push origin $TAG
      
      - name: Create release notes
        if: github.event.inputs.environment == 'prod'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            ## Changes in this release
            - Validated macros deployed to production
            - All tests passed
            - Documentation updated
          draft: false
          prerelease: false

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-to-viya]
    if: always()
    
    steps:
      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: SAS CI/CD Pipeline Failed - ${{ github.repository }}
          to: clinical-programming-team@company.com
          from: CI/CD Pipeline
          body: |
            The SAS macro CI/CD pipeline has failed.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      
      - name: Send Teams notification
        if: vars.TEAMS_WEBHOOK_URL != ''
        run: |
          STATUS="${{ needs.deploy-to-viya.result }}"
          COLOR=$([ "$STATUS" == "success" ] && echo "00FF00" || echo "FF0000")
          
          curl -H "Content-Type: application/json" -d "{
            \"@type\": \"MessageCard\",
            \"@context\": \"http://schema.org/extensions\",
            \"themeColor\": \"$COLOR\",
            \"summary\": \"SAS CI/CD Pipeline $STATUS\",
            \"sections\": [{
              \"activityTitle\": \"SAS Macro Pipeline\",
              \"facts\": [
                {\"name\": \"Repository\", \"value\": \"${{ github.repository }}\"},
                {\"name\": \"Branch\", \"value\": \"${{ github.ref }}\"},
                {\"name\": \"Status\", \"value\": \"$STATUS\"},
                {\"name\": \"Run\", \"value\": \"[${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}
              ]
            }]
          }" ${{ vars.TEAMS_WEBHOOK_URL }}