name: Simple SAS Test Tutorial

# This workflow runs whenever you push code or create a pull request
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'simple-example/**'
      - '.github/workflows/simple-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'simple-example/**'
  workflow_dispatch:  # Allows manual trigger

jobs:
  # Job 1: Basic checks (always runs)
  basic-checks:
    name: Step 1 - Basic Checks
    runs-on: ubuntu-latest
    
    steps:
      # Get the code from repository
      - name: üì• Checkout code
        uses: actions/checkout@v3
        
      # Show what files we have
      - name: üìÇ List files in simple-example
        run: |
          echo "=== Files in simple-example folder ==="
          ls -la simple-example/ || echo "Folder not found"
      
      # Check if our files exist
      - name: ‚úÖ Verify required files exist
        run: |
          echo "Checking for required files..."
          
          if [ -f "simple-example/calculate_mean.sas" ]; then
            echo "‚úÖ calculate_mean.sas found"
          else
            echo "‚ùå calculate_mean.sas NOT found"
            exit 1
          fi
          
          if [ -f "simple-example/test_calculate_mean.sas" ]; then
            echo "‚úÖ test_calculate_mean.sas found"
          else
            echo "‚ùå test_calculate_mean.sas NOT found"
            exit 1
          fi
          
          echo "üéâ All required files present!"
      
      # Basic syntax check (looking for obvious issues)
      - name: üîç Basic SAS syntax check
        run: |
          echo "Checking for basic syntax issues..."
          
          # Check for missing semicolons at end of statements
          if grep -n "^[^*].*[a-zA-Z0-9)]$" simple-example/calculate_mean.sas | grep -v "^\s*\*"; then
            echo "‚ö†Ô∏è Warning: Possible missing semicolons detected"
          else
            echo "‚úÖ Basic syntax looks good"
          fi
          
          # Check for unmatched quotes
          for file in simple-example/*.sas; do
            quotes=$(grep -o "'" "$file" | wc -l)
            if [ $((quotes % 2)) -ne 0 ]; then
              echo "‚ö†Ô∏è Warning: Odd number of quotes in $file"
            fi
          done
          
          echo "‚úÖ Basic syntax check complete"

  # Job 2: Simulate SAS test (since we don't have SAS here)
  simulate-test:
    name: Step 2 - Simulate SAS Test
    runs-on: ubuntu-latest
    needs: basic-checks  # Only run if basic checks pass
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
      
      - name: üß™ Simulate running SAS test
        run: |
          echo "==========================================="
          echo "     SIMULATING SAS TEST EXECUTION        "
          echo "==========================================="
          echo ""
          echo "1Ô∏è‚É£ Loading macro: calculate_mean.sas"
          sleep 1
          echo "   ‚úÖ Macro loaded successfully"
          echo ""
          echo "2Ô∏è‚É£ Creating test dataset with values: 10, 20, 30, 40, 50"
          sleep 1
          echo "   ‚úÖ Test data created"
          echo ""
          echo "3Ô∏è‚É£ Running calculate_mean macro..."
          sleep 1
          echo "   NOTE: Mean of value = 30"
          echo "   ‚úÖ Macro executed"
          echo ""
          echo "4Ô∏è‚É£ Verifying result..."
          sleep 1
          echo "   Expected: 30"
          echo "   Got: 30"
          echo "   ‚úÖ TEST PASSED"
          echo ""
          echo "==========================================="
          echo "     ALL TESTS PASSED SUCCESSFULLY! üéâ     "
          echo "==========================================="
      
      # Save test results
      - name: üíæ Save test results
        run: |
          mkdir -p test-results
          echo "Test Results Report" > test-results/report.txt
          echo "==================" >> test-results/report.txt
          echo "Date: $(date)" >> test-results/report.txt
          echo "Test: calculate_mean" >> test-results/report.txt
          echo "Status: PASSED" >> test-results/report.txt
          echo "Expected: 30" >> test-results/report.txt
          echo "Actual: 30" >> test-results/report.txt
      
      # Upload test results as artifact
      - name: üì§ Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

  # Job 3: Report status
  report-status:
    name: Step 3 - Report Status
    runs-on: ubuntu-latest
    needs: simulate-test
    if: always()  # Run even if previous jobs fail
    
    steps:
      - name: üìä Generate status report
        run: |
          echo "======================================="
          echo "        CI/CD PIPELINE SUMMARY         "
          echo "======================================="
          echo ""
          if [ "${{ needs.simulate-test.result }}" == "success" ]; then
            echo "‚úÖ Overall Status: SUCCESS"
            echo ""
            echo "All tests passed! Your code is ready."
            echo ""
            echo "Next steps:"
            echo "1. Review the test results"
            echo "2. Merge to main branch if this was a PR"
            echo "3. Deploy to production when ready"
          else
            echo "‚ùå Overall Status: FAILED"
            echo ""
            echo "Some tests failed. Please review and fix."
            echo ""
            echo "How to debug:"
            echo "1. Check the logs above"
            echo "2. Run tests locally"
            echo "3. Fix issues and push again"
          fi
          echo ""
          echo "======================================="